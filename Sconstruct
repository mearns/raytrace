#! /usr/bin/env python
# vim: set fileencoding=utf-8: set encoding=utf-8:

'''
    In order to build this sucker, you need as a minimum these downloads:
    1. GTK+ 2 libraries, which you can get from here if your os doesn't have a package manager
        that will fetch them for you (eg win32):
        http://www.gtk.org/download/win32.php , specifically
        http://win32builder.gnome.org/packages/3.6/gtk+-dev_3.6.4-1_win32.zip
        You'll also need a slew of dependencies for GTK+ 2 to work. I suggest downloading the
        bundle dist:
        http://ftp.gnome.org/pub/gnome/binaries/win32/gtk+/2.24/gtk+-bundle_2.24.10-20120208_win32.zip
    3. pkg-config, same as above, or specifically
        http://win32builder.gnome.org/packages/3.6/pkg-config_0.28-1_win32.zip
        
    You'll also want to set the environment variable "PKG_CONFIG_PATH" to the directory containing
    the *.pc files for GTK+ 2, and also add to path the necessary executables. See 'scons_win.bat'
    for an example.

    Read `https://github.com/mearns/raytrace/wiki/dependencies`_ for detailed instructions =).
'''

######## This is the setup

import os
import os.path

if 'PKG_CONFIG_PATH' not in os.environ:
    print 'Error- you need to set "PKG_CONFIG_PATH" for this build to work'
    exit(-1)

#Create the build environment
env = Environment(
    #Set up the system environment variables that will be used in the processes that are launched
    # to actually do the builds.
    #This process doesn't inherit (most things at least) from the system env vars, so we want
    # to copy some of them.
    ENV = {
        #System Path, where executable commands are found.
        'PATH': os.environ['PATH'],

        #Tells pkg-config where to look for *.pc files.
        'PKG_CONFIG_PATH': os.environ['PKG_CONFIG_PATH'],

        #In case we need to create temp files.
        'TEMP' : os.environ.get('TEMP', os.environ.get('TMPDIR', './temp')),
        'TMP' : os.environ.get('TMP', os.environ.get('TMPDIR', './temp')),
    },
    #Specify which scons tools we want to use.
    tools = [
        #All the defaults (builtins)
        'default',

        #And specify we want to use gcc for C programs.
        'gcc',
    ],
)

#Set the CCFLAGS and LINKFLAGS construction vars, used to build the command lines
# for compiling C files and linking object files.
#Get all warnings.
env.Append(CCFLAGS=' -Wall -g')
#Use parse the output of pkg-config to add additinoal CCFLAGS and LINKFLAGS needed
# to build gtk apps.
env.ParseConfig('pkg-config --cflags --libs gtk+-2.0')


######## These are the build rules.

#Glob for all of our C src files.
src_files = env.Glob('src/*.c')
header_files = env.Glob('src/*.h')

#Build object files from source files.
obj_files = env.Object(src_files)

#Add some aliases for building individual object files.
for obj in obj_files:
    name = os.path.splitext(os.path.basename(obj.abspath))[0]
    env.Alias(name, obj)
    env.Alias(name + '.o', obj)
    env.Alias(name + '.obj', obj)
    env.Alias(name + '_obj', obj)

#Set up a command line target-alias to build the object files (e.g., `scons obj`).
env.Alias('obj', obj_files)

#Build the the program from the object files.
program = env.Program('main', obj_files)

#Install the program into the 'results' dir.
installed = env.Install('results/', program)

#Set up 'prog' as a target-alias for building and installing the progam.
env.Alias('prog', installed)

#Set the default target, if no target is specified on the command line, build and install
# the program.
env.Default(installed)

### Build the ctags file.
tag_file = env.Command('tags', src_files + header_files, 'ctags --c++-kinds=+p --fields=+iaS --extra=+q $SOURCES')
env.Alias('tags', tag_file)

